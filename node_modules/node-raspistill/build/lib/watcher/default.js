"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var abstract_1 = require("./abstract");
var EVENT_RENAME = 'rename';
var EVENT_CHANGE = 'change';
var ENOENT = 'ENOENT';
var EEXISTS = 'EEXIST';
var DefaultWatcher = (function (_super) {
    __extends(DefaultWatcher, _super);
    function DefaultWatcher(options) {
        return _super.call(this, options) || this;
    }
    DefaultWatcher.prototype.watchAndGetFile = function (filePath, options) {
        var _this = this;
        var dirName = path.dirname(filePath);
        var fileName = path.basename(filePath);
        return new Promise(function (resolve, reject) {
            fs.mkdir(dirName, function (err) {
                if (err) {
                    if (err.code !== EEXISTS) {
                        reject(err);
                    }
                }
                var watcher = fs.watch(dirName, function (eventType, changedFileName) {
                    if ((eventType === EVENT_RENAME || eventType === EVENT_CHANGE) && fileName === changedFileName) {
                        watcher.close();
                        fs.readFile(filePath, function (err, data) {
                            if (err) {
                                if (err.code === ENOENT) {
                                    resolve(null);
                                }
                                reject(err);
                            }
                            resolve(data);
                        });
                    }
                });
                setTimeout(function () {
                    watcher.close();
                    reject(new Error('No file found'));
                }, _this.getOption('expireTime'));
            });
        });
    };
    DefaultWatcher.prototype.watchAndGetFiles = function (dirPath, watchTimeMs, cb) {
        var dirName = path.basename(dirPath);
        return new Promise(function (resolve, reject) {
            fs.mkdir(dirName, function (err) {
                if (err) {
                    if (err.code !== EEXISTS) {
                        reject(err);
                    }
                }
                var watcher = fs.watch(dirName, function (eventType, changedFileName) {
                    if (changedFileName[changedFileName.length - 1] === DefaultWatcher.IMAGE_IN_PROGRESS_SYMBOL) {
                        return;
                    }
                    if ((eventType === EVENT_RENAME)) {
                        fs.readFile(dirName + '/' + changedFileName, function (err, data) {
                            if (err) {
                                reject(err);
                            }
                            else {
                                cb(data);
                            }
                        });
                    }
                });
                setTimeout(function () {
                    watcher.close();
                    resolve();
                }, watchTimeMs);
            });
        });
    };
    return DefaultWatcher;
}(abstract_1.AbstractWatcher));
DefaultWatcher.IMAGE_IN_PROGRESS_SYMBOL = '~';
exports.DefaultWatcher = DefaultWatcher;
