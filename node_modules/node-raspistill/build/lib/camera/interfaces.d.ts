/// <reference types="node" />
export declare type TCameraFileEncoding = 'jpg' | 'bpm' | 'gif' | 'png';
export interface ICameraOptions {
    noFileSave?: boolean;
    verticalFlip?: boolean;
    horizontalFlip?: boolean;
    noPreview?: boolean;
    outputDir?: string;
    fileName?: string;
    encoding?: TCameraFileEncoding;
    width?: number;
    height?: number;
}
export interface IInnerExecCameraOptions extends ICameraOptions {
    timelapse?: number;
    time?: number;
}
export interface ICamera {
    takePhoto(fileName?: string): Promise<Buffer>;
    timelapse(fileName: string, intervalMs: number, execTimeMs: number, cb: (image: Buffer) => any): Promise<void>;
    timelapse(intervalMs: number, execTimeMs: number, cb: (image: Buffer) => any): Promise<void>;
    setOptions(options: ICameraOptions): void;
    setDefaultOptions(): void;
    getOptions(): ICameraOptions;
    getOption(key: string): any;
}
